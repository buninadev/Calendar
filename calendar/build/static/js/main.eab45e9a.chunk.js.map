{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["DataFetcher","state","loading","offers","fetch","response","json","data","this","setState","results","className","NavOffers","React","Component","Navigation","year","month","day","dayStr","String","padStart","dateStr","key","onClick","ClickHandler","bind","date1","date2","Date","sameday","getDate","samemonth","getMonth","sameyear","getFullYear","input","output","forEach","result","startDate","date_start","checkSameDate","push","props","SelectedOffers","LookForOffers","date","days","setDate","start","startdate","buttons","index","Iterdate","addDays","createButton","laybuttons","Displayoffers","OfferTable","offerGroup","offer","id","activity","disp","available","level","full","duration","duration_minute","coach","cool","Offer","toString","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.eab45e9a.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\n\nclass DataFetcher extends React.Component{\n\n  state= {\n    loading: true,\n    offers: null\n  };\n  \nasync componentDidMount() {\n  const url= \"https://back.staging.bsport.io/api/v1/offer/?min_date=2020-04-27&max_date=2020-05-03&company=6\" ;\n  const response = await fetch(url);\n  const data= await response.json();\n  this.setState({loading:false,offers:data.results})\n}\n\nrender() {\n  return (\n  <div>\n    {this.state.loading || !this.state.offers ?(\n    <div className=\"Indicator\">loading........</div>\n    ):(\n      <div>\n    <div className=\"Indicator\" >Data Loaded</div> \n    <Navigation NavOffers={this.state.offers} ></Navigation>\n    </div>)  \n  }\n  </div>\n  \n \n  );\n}\n}\n\n// Navigation class: creates a group of buttons (parent of DayButton)\nclass Navigation extends React.Component{\n\n  constructor(){\n    super();\n    this.state = {offers: null}\n}\ncreateButton(year,month,day){\n  const dayStr= String(day).padStart(2, '0');\n  const monthStr=String(month).padStart(2, '0');\n  const dateStr= dayStr+'/'+monthStr;\n  return(<button key={dayStr} onClick={this.ClickHandler.bind(this,year,month,day)}>\n      {dateStr} \n      </button>);\n}\n\ncheckSameDate(date1 ,date2){\n\n   date1 = new Date(date1);\n   date2 = new Date(date2);\n\n  var sameday= date1.getDate()===date2.getDate();\n  var samemonth=date1.getMonth()===date2.getMonth();\n  var sameyear=date1.getFullYear()===date2.getFullYear();\n  return(sameday&& samemonth && sameyear)\n}\n\n\nLookForOffers(input,year,month,day){\n  var output=[]\ninput.forEach(result => {\n var startDate=result.date_start;\n var conditon=this.checkSameDate(startDate,year+'/'+month+'/'+day)\n\nif(conditon){  output.push(result)}\n  \n});\nreturn output\n}\n\nUNSAFE_componentWillMount(){\n\n  this.ClickHandler(2020,4,27);\n}\nClickHandler(year, month, day){\n\nvar input= this.props.NavOffers;\nvar SelectedOffers= this.LookForOffers(input,year,month,day);\nthis.setState({offers:SelectedOffers})\n\n}\n\naddDays(date, days) {\n  var result = new Date(date);\n  result.setDate(result.getDate() + days);\n  return result;\n}\n\nlaybuttons(start){\n  var startdate =new Date(start);\n  let buttons=[] // array that gonna contain a list of (<DayButton date={dateStr} year={year} month={month} day={day}></DayButton>)\n   for (let index = 0; index < 7; index++) {\n        var Iterdate=this.addDays(startdate,index) // adding days to start date for iteration\n        var day =Iterdate.getDate();\n        var month= Iterdate.getMonth()+1;\n        var year =Iterdate.getFullYear();\n        buttons.push(this.createButton(year,month,day))\n      }\n      return buttons\n}\n\n  render(){\nreturn(<div>\n    <div className=\"btn-group\">\n      {this.laybuttons('2020-04-27')}\n    </div>\n    <div className=\"offer-group\">\n    <OfferTable Displayoffers={this.state.offers}></OfferTable></div>\n    </div>\n    );\n  }\n}\nclass OfferTable extends React.Component{\n  cool(){\n    var offerGroup= []\nvar offers = this.props.Displayoffers\n  offers.forEach(offer => {  \n  offerGroup.push(<Offer key={offer.id} activity={offer.activity} disp={offer.available} level={offer.level} full={offer.full} duration={offer.duration_minute} coach={offer.coach} ></Offer>)\n  });\n  return(offerGroup)\n}\n  render(){\n  return(<div>{this.cool()}</div>);\n  }\n}\n\nclass Offer extends React.Component{\nrender(){\n   return(<div className=\"Day-offers\"><div className=\"offre\">\n   <div><b className='activity'>Title: {this.props.activity}</b></div>\n   <span className= \"desc\">Disponiblité: {this.props.disp.toString()}</span>\n   <span className= \"desc\">Niveau: {this.props.level}</span>\n   <span>Plein: {this.props.full.toString()}</span>\n   <br></br>\n   <span className='desc'>durée: {this.props.duration}</span>\n   <span className ='desc'>Par: {this.props.coach}</span>\n   </div>\n   </div> );\n}\n}\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p>\n          Company ID: 6\n        </p>\n      </header>\n      <div className=\"Actual-week\">\n        <span>\n          Semaine actuelle : Lun 27/04 - Dim 03/05\n        </span>\n      </div>\n      <DataFetcher></DataFetcher>\n    </div>\n  );\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}