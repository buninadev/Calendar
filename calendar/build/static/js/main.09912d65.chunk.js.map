{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["DayButton","props","state","loading","offers","Clickaction","bind","ReactDOM","render","document","getElementById","offertable","this","forEach","element","push","OfferTable","createOffer","activity","available","level","full","duration_minute","coach","UpdateOffers","dateObj","year","month","day","url","console","log","fetch","response","json","data","setState","results","onClick","date","React","Component","Navigation","dateStr","String","padStart","days","result","Date","setDate","getDate","start","startdate","buttons","index","Iterdate","addDays","getMonth","getFullYear","createButton","className","laybuttons","disp","duration","toString","App","Boolean","window","location","hostname","match","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"gSAIMA,G,wDAKJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IALRC,MAAO,CACLC,SAAS,EACTC,OAAQ,MAIV,EAAKC,YAAa,EAAKA,YAAYC,KAAjB,gBAFC,E,yDAMNF,GACXG,IAASC,OAAO,kBAAC,EAAD,CAAYJ,OAAQA,IAAsBK,SAASC,eAAe,a,oCAIpF,IAAIC,EAAW,GACfC,KAAKV,MAAME,OAAOS,SAAQ,SAAAC,GACzBH,EAAWI,KAAKC,EAAWC,YAAYH,EAAQI,SAASJ,EAAQK,UAAUL,EAAQM,MAAMN,EAAQO,KAAKP,EAAQQ,gBAAgBR,EAAQS,WAGtIX,KAAKY,aAAab,K,uKAOZc,EAAQb,KAAKX,MAAMyB,KAAK,IAAId,KAAKX,MAAM0B,MAAM,IAAIf,KAAKX,MAAM2B,IAC5DC,EAAK,qDAAqDJ,EAAQ,aACxEK,QAAQC,IAAIF,G,SACWG,MAAMH,G,cAAvBI,E,gBACYA,EAASC,O,OAArBC,E,OACNvB,KAAKwB,SAAS,CAACjC,SAAQ,EAAMC,OAAO+B,EAAKE,U,sIAGvC,OACE,4BAAQC,QAAS1B,KAAKP,aACnBO,KAAKX,MAAMsC,U,GAtCIC,IAAMC,YAgFxBC,E,2KAGOhB,EAAKC,EAAMC,GACtB,IAEMe,EAFQC,OAAOhB,GAAKiB,SAAS,EAAG,KAEhB,IADPD,OAAOjB,GAAOkB,SAAS,EAAG,KAE3C,OAAO,kBAAC,EAAD,CAAWN,KAAMI,EAASjB,KAAMA,EAAMC,MAAOA,EAAOC,IAAKA,M,8BAGxDW,EAAMO,GACZ,IAAIC,EAAS,IAAIC,KAAKT,GAEtB,OADAQ,EAAOE,QAAQF,EAAOG,UAAYJ,GAC3BC,I,iCAGEI,GAGR,IAFD,IAAIC,EAAW,IAAIJ,KAAKG,GACpBE,EAAQ,GACFC,EAAQ,EAAGA,EAAQ,EAAGA,IAAS,CACnC,IAAIC,EAAS3C,KAAK4C,QAAQJ,EAAUE,GAChC1B,EAAK2B,EAASL,UACdvB,EAAO4B,EAASE,WAAW,EAC3B/B,EAAM6B,EAASG,cACnBL,EAAQtC,KAAKH,KAAK+C,aAAajC,EAAKC,EAAMC,IAE5C,OAAOyB,I,+BAKb,OACI,yBAAKO,UAAU,aACZhD,KAAKiD,WAAW,mB,GAjCErB,IAAMC,WAwCzBzB,E,uKAmBH,OAAO,yBAAK4C,UAAW,eAAehD,KAAKX,MAAMG,W,mCAjBjCc,EAAS4C,EAAK1C,EAAMC,EAAK0C,EAASxC,GAanD,OAVa,yBAAKqC,UAAU,cAAa,yBAAKA,UAAU,SACxD,6BAAK,uBAAGA,UAAU,YAAb,UAAgC1C,IACrC,uBAAG0C,UAAW,QAAd,oBAAoCE,EAAKE,YACzC,uBAAGJ,UAAW,QAAd,WAA8BxC,GAC9B,qCAAWC,EAAK2C,YAChB,6BACA,uBAAGJ,UAAU,QAAb,aAA4BG,GAC5B,uBAAGH,UAAW,QAAd,QAA2BrC,S,GAZJiB,IAAMC,WAkDhBwB,MA1Bf,WACE,OACE,yBAAKL,UAAU,OACb,4BAAQA,UAAU,cAChB,6CAKF,yBAAKA,UAAU,eACb,wEAIF,yBAAKA,UAAU,aACf,kBAAC,EAAD,OAEA,yBAAKA,UAAU,aCzJDM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZN/D,IAASC,OACP,kBAAC,IAAM+D,WAAP,KACE,kBAAC,EAAD,OAEF9D,SAASC,eAAe,SDyHpB,kBAAmB8D,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjD,QAAQiD,MAAMA,EAAMC,c","file":"static/js/main.09912d65.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport ReactDOM from 'react-dom';\n\nclass DayButton extends React.Component {\n  state= {\n    loading: true,\n    offers: null,\n  };\n  constructor(props) {\n    super(props)\n  this.Clickaction= this.Clickaction.bind(this) // binding clickaction to the button instance\n  }\n\n// seperatly render an instance of OfferTable while passing a list of offers from API as a property \n  UpdateOffers(offers){\n    ReactDOM.render(<OfferTable offers={offers}></OfferTable>,document.getElementById('offers'))  \n  }\nClickaction()\n{\n  let offertable=[]\n  this.state.offers.forEach(element=>{\n   offertable.push(OfferTable.createOffer(element.activity,element.available,element.level,element.full,element.duration_minute,element.coach))\n  });\n\n  this.UpdateOffers(offertable)\n}\n\n\n// async method that fetch data from api for every DayButton Instance ... the goal is to have for every button an offers state (data) that is related too\n// props are assigned using Navigator.createbutton ::: Line 92\nasync componentDidMount() {\n  const dateObj=this.props.year+\"-\"+this.props.month+\"-\"+this.props.day\n  const url= \"https://back.staging.bsport.io/api/v1/offer/?date=\"+dateObj+\"&company=6\" ;\n  console.log(url)\n  const response = await fetch(url);\n  const data= await response.json();\n  this.setState({loading:false,offers:data.results})\n}\n  render() {\n    return (\n      <button onClick={this.Clickaction}>\n        {this.props.date} \n      </button>\n    );\n  }\n}\n\n/*  Just the first test for data fetching from the API   */\n// class DataFetcher extends React.Component{\n\n//   state= {\n//     loading: true,\n//     offers: null\n//   };\n  \n// async componentDidMount() {\n//   const url= \"https://back.staging.bsport.io/api/v1/offer/?min_date=2020-04-27&max_date=2020-05-03&company=6\" ;\n//   const response = await fetch(url);\n//   const data= await response.json();\n//   this.setState({loading:false,offers:data.results})\n// }\n\n// getoffers(){\n// if(!this.state.loading|| this.state.offers)\n// return(this.state.offers);\n// }\n\n// render() {\n//   return (\n//   <a >\n//     {this.state.loading|| !this.state.offers ?(\n//     <div className=\"Indicator\">loading........</div>\n//     ):(\n//     <div className=\"Indicator\" >Data Loaded</div>)  \n//   }\n//   </a>\n//   );\n// }\n// }\n\n\n\n// Navigation class: creates a group of buttons (parent of DayButton)\nclass Navigation extends React.Component{\n\n\ncreateButton(year,month,day){\n  const dayStr= String(day).padStart(2, '0');\n  const monthStr=String(month).padStart(2, '0');\n  const dateStr= dayStr+'/'+monthStr;\nreturn(<DayButton date={dateStr} year={year} month={month} day={day}></DayButton>);\n}\n\naddDays(date, days) {\n  var result = new Date(date);\n  result.setDate(result.getDate() + days);\n  return result;\n}\n\nlaybuttons(start){\n  var startdate =new Date(start);\n  let buttons=[] // array that gonna contain a list of (<DayButton date={dateStr} year={year} month={month} day={day}></DayButton>)\n   for (let index = 0; index < 7; index++) {\n        var Iterdate=this.addDays(startdate,index) // adding days to start date for iteration\n        var day =Iterdate.getDate();\n        var month= Iterdate.getMonth()+1;\n        var year =Iterdate.getFullYear();\n        buttons.push(this.createButton(year,month,day))\n      }\n      return buttons\n}\n\n\n  render(){\nreturn(\n    <div className=\"btn-group\">\n      {this.laybuttons('2020-04-27')}\n    </div>\n    );\n  }\n}\n\n\nclass OfferTable extends React.Component{\n\nstatic createOffer(activity,disp,level,full,duration,coach){    // static method because it is relation to offerTable, it can be moved to class DayButton and nothing will change\n                                                                  // I keep it in this class for code readability\n\n  const offer =<div className=\"Day-offers\"><div className=\"offre\">\n  <div><b className='activity'>Title: {activity}</b></div>\n  <a className= \"desc\">Disponiblité: {disp.toString()}</a>\n  <a className= \"desc\">Niveau: {level}</a>\n  <a>Plein: {full.toString()}</a>\n  <br></br>\n  <a className='desc'>durée: {duration}</a>\n  <a className ='desc'>Par: {coach}</a>\n  </div>\n  </div>\n  return offer\n}\n\nrender(){\n   return(<div className =\"offer-group\">{this.props.offers}</div>)\n}\n\n}\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p>\n          Company ID: 6\n        </p>\n      </header>\n\n      <div className=\"Actual-week\">\n        <a>\n          Semaine actuelle : Lun 27/04 - Dim 03/05\n        </a>\n      </div>\n      <div className=\"Days-week\">\n      <Navigation></Navigation>\n      </div >\n      <div className=\"offers\">\n\n      </div>\n      \n    </div>\n  );\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}